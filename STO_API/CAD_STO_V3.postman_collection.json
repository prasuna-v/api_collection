{
	"info": {
		"_postman_id": "79ed3868-c48d-4c00-a5f0-3973fad2c579",
		"name": "CAD_STO_V3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "View",
			"item": [
				{
					"name": "{{url}}/v3/ip/sec/session/open",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// postman.clearGlobalVariables();",
									"var data = JSON.parse(responseBody);",
									"if (data.oauthToken) {",
									"    postman.setEnvironmentVariable(\"oauthToken\", data.oauthToken);",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.refreshToken) {",
									"    postman.setEnvironmentVariable(\"refreshToken\", data.refreshToken);",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.clientKey) {",
									"    postman.setEnvironmentVariable(\"client_key1\", data.clientKey);",
									"}",
									"",
									"var data = JSON.parse(responseBody);",
									"if (data.clientSecret) {",
									"    postman.setEnvironmentVariable(\"client_secret1\", data.clientSecret);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Accept-version",
								"type": "text",
								"value": "3.1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usrName\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"sessOverrideKey\": null,\n  \"withPerm\": true\n   \n   \n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/sec/session/open",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"sec",
								"session",
								"open"
							],
							"query": [
								{
									"key": "sessOverrideKey",
									"value": "c3e745f1-9596-4afe-b04b-44620afc56e3",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Random reserve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"console.log(request)",
									"let body = JSON.parse(responseBody)",
									"console.log(body)",
									"",
									"if(responseCode.code === 202){",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);",
									"}else if(responseCode.code === 400){",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);",
									"    if(jsonData.errList){",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);",
									"    }else{",
									"    console.log(\"errList\");",
									"    }",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) ",
									"}else if(responseCode.code === 200)",
									"{   if(jsonData.numList){",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);",
									"     ",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"conName\":\"Prasuna\",\"shrtNotes\":\"Default Page\",\"conTel\":\"7727700909\",\"qty\":1}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/num/tfn/srchres/random",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"num",
								"tfn",
								"srchres",
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "Number Reserve -SO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var nusJsonData = JSON.parse(responseBody);\r",
									"console.log(nusJsonData.numList[0]);\r",
									"if(nusJsonData.numList[0]){\r",
									"    postman.setGlobalVariable(\"num\", nusJsonData.numList[0]);\r",
									"}\r",
									"console.log(request)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"numList\" : [\"8333330017\"] ,\r\n     \"conName\" : \"Venky\",\r\n    \"conTel\":\"7727701234\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/v3/ip/num/tfn/srchres/random?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"num",
								"tfn",
								"srchres",
								"random"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD_create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/tfnum/{{num}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"tfnum",
								"{{num}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD_create STO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD_VIEW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/tfnum/{{num}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"tfnum",
								"{{num}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD Retrieve req Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TAD VIEW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// postman.clearGlobalVariables();",
									"// var jsonData = JSON.parse(responseBody);",
									"// if(!jsonData.fault){",
									"//     if(jsonData.reqId){",
									"//         postman.setGlobalVariable(\"syncTimeoutReqId\", jsonData.reqId);",
									"//     }else if(jsonData.errList){",
									"//         if(jsonData.errList[0].errCode==\"505004\"){",
									"//             postman.setGlobalVariable(\"viewNum\", jsonData.num);",
									"//             postman.setGlobalVariable(\"viewRecVersionId\", jsonData.recVersionId);",
									"//             postman.setGlobalVariable(\"viewEffDtTmForUpdate\", jsonData.effDtTm);",
									"//             var viewEffDtTm = jsonData.effDtTm.replace(/-/gi,'');",
									"//             var viewEffDtTm = viewEffDtTm.replace(/:/gi,'');",
									"//             postman.setGlobalVariable(\"viewEffDtTm\",viewEffDtTm);",
									"//         }",
									"//     }else if(!jsonData.errList){",
									"//         postman.setGlobalVariable(\"viewNum\", jsonData.num);",
									"//         postman.setGlobalVariable(\"viewRecVersionId\", jsonData.recVersionId);",
									"//         postman.setGlobalVariable(\"viewEffDtTmForUpdate\", jsonData.effDtTm);",
									"//         var viewEffDtTm = jsonData.effDtTm.replace(/-/gi,'');",
									"//         var viewEffDtTm = viewEffDtTm.replace(/:/gi,'');",
									"//         postman.setGlobalVariable(\"viewEffDtTm\",viewEffDtTm);",
									"//     }else{",
									"//         postman.setGlobalVariable(\"numStatus\", jsonData.numStatus);",
									"//     }",
									"// }",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"console.log(request)",
									"let body = JSON.parse(responseBody)",
									"console.log(body)",
									"",
									"if(responseCode.code === 202){",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);",
									"}else if(responseCode.code === 400){",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);",
									"    if(jsonData.errList){",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);",
									"    }else{",
									"    console.log(\"errList\");",
									"    }",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) ",
									"}else if(responseCode.code === 200)",
									"{   if(jsonData.numList){",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);",
									"     ",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/tpl/tmplName/%2ACBW01TEST6",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tpl",
								"tmplName",
								"%2ACBW01TEST6"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TAD Retrieve Req Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if(!jsonData.fault){",
									"    if(jsonData.reqId){",
									"        postman.setGlobalVariable(\"syncTimeoutReqId\", jsonData.reqId);",
									"    }else if(jsonData.errList){",
									"        if(jsonData.errList[0].errCode==\"505004\"){",
									"            postman.setGlobalVariable(\"viewNum\", jsonData.num);",
									"            postman.setGlobalVariable(\"viewRecVersionId\", jsonData.recVersionId);",
									"            postman.setGlobalVariable(\"viewEffDtTmForUpdate\", jsonData.effDtTm);",
									"            var viewEffDtTm = jsonData.effDtTm.replace(/-/gi,'');",
									"            var viewEffDtTm = viewEffDtTm.replace(/:/gi,'');",
									"            postman.setGlobalVariable(\"viewEffDtTm\",viewEffDtTm);",
									"        }",
									"    }else if(!jsonData.errList){",
									"        postman.setGlobalVariable(\"viewNum\", jsonData.num);",
									"        postman.setGlobalVariable(\"viewRecVersionId\", jsonData.recVersionId);",
									"        postman.setGlobalVariable(\"viewEffDtTmForUpdate\", jsonData.effDtTm);",
									"        var viewEffDtTm = jsonData.effDtTm.replace(/-/gi,'');",
									"        var viewEffDtTm = viewEffDtTm.replace(/:/gi,'');",
									"        postman.setGlobalVariable(\"viewEffDtTm\",viewEffDtTm);",
									"    }else{",
									"        postman.setGlobalVariable(\"numStatus\", jsonData.numStatus);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/tpl?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tpl"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								},
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TAL Retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"console.log(request)",
									"let body = JSON.parse(responseBody)",
									"console.log(body)",
									"",
									"if(responseCode.code === 202){",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);",
									"}else if(responseCode.code === 400){",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);",
									"    if(jsonData.errList){",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);",
									"    }else{",
									"    console.log(\"errList\");",
									"    }",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) ",
									"}else if(responseCode.code === 200)",
									"{   if(jsonData.numList){",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);",
									"     ",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/tal/entity/BR",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tal",
								"entity",
								"BR"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TAL Retrieve ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/tal?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tal"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								},
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IVR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/ivr/tfnum/{{num}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ivr",
								"tfnum",
								"{{num}}"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IVR Retrieve ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/ivr?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ivr"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								},
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/hpu/entity/BR",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"hpu",
								"entity",
								"BR"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HPU Retrieve ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/hpu?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"hpu"
							],
							"query": [
								{
									"key": "effDtTm",
									"value": "20181215T2045Z",
									"disabled": true
								},
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD LOCK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"srcEffDtTm\": \"2020-12-18T10:30Z\",\n    \"srcNum\": \"{{num}}\",\n    \"tgtNum\": \"{{num}}\",\n    \"custRecAction\": \"COPY\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/lock",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"lock"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD LOCK  Req Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"srcNum\": \"8556664068\",\n\"srcEffDtTm\": \"2018-04-14T04:45Z\",\n\"tgtEffDtTm\":\"2018-04-15T04:00Z\",\n\"custRecCompPart\":\"CAD\",\n\"custRecAction\": \"COPY\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/lock?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"lock"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD UNLOCK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"num\": \"8339173524\",\n    \"effDtTm\": \"2020-12-18T09:00Z\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/unlock",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"unlock"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD UNLOCK ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"num\": \"8556664068\",\n\"effDtTm\": \"2018-04-14T04:45Z\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/unlock?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"unlock"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD TRANSFER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"hldIndFlag\": \"N\",\n    \"svcOrderNum\": \"Test123\",\n    \"telco\": \"BRSA\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcNum\": \"8339173524\",\n    \"tgtNum\": \"8339173524\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T09:00Z\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608201767764000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/transfer",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD TRANSFER ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"hldIndFlag\": \"N\",\n    \"svcOrderNum\": \"Test123\",\n    \"telco\": \"BRSA\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcNum\": \"8339173524\",\n    \"tgtNum\": \"8339173524\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T09:00Z\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608201767764000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/transfer?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"transfer"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"hldIndFlag\": \"N\",\n    \"svcOrderNum\": \"Test123\",\n    \"telco\": \"BRSA\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcNum\": \"8339173524\",\n    \"tgtNum\": \"8339173524\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T09:00Z\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608201767764000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/query/{{num}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"query",
								"{{num}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD Query ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"hldIndFlag\": \"N\",\n    \"svcOrderNum\": \"Test123\",\n    \"telco\": \"BRSA\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcNum\": \"8339173524\",\n    \"tgtNum\": \"8339173524\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T09:00Z\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608201767764000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/query?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"query"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD_DISCONNECT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"hldIndFlag\": \"N\",\n    \"svcOrderNum\": \"Test123\",\n    \"telco\": \"BRSA\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"cmd\": \"U\",\n    \"referral\": \"Y\",\n    \"endInterceptDt\": \"2020-12-31\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcNum\": \"8339173524\",\n    \"tgtNum\": \"8339173524\",\n    \"tgtEffDtTm\": \"2020-12-31\",\n    \"srcEffDtTm\": \"2020-12-19T09:00Z\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608202163809000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/disconnect",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "CAD_DISCONNECT ReqId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"hldIndFlag\": \"N\",\n    \"svcOrderNum\": \"Test123\",\n    \"telco\": \"BRSA\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"cmd\": \"U\",\n    \"referral\": \"Y\",\n    \"endInterceptDt\": \"2020-12-31\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcNum\": \"8339173524\",\n    \"tgtNum\": \"8339173524\",\n    \"tgtEffDtTm\": \"2020-12-31\",\n    \"srcEffDtTm\": \"2020-12-19T09:00Z\",\n    \"custRecCompPart\": \"CAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608202163809000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/disconnect?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"disconnect"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TAD Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"numTermLine\": 11,\n    \"tmZn\": \"C\",\n    \"dayLightSavings\": \"Y\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcTmplName\": \"*BR-DEF-13352\",\n    \"tgtTmplName\": \"*BR-DEF-13352\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T10:15Z\",\n    \"tmplRecCompPart\": \"TAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608202775361000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/tpl/copy",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tpl",
								"copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "TAD Copy reqId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"numTermLine\": 11,\n    \"tmZn\": \"C\",\n    \"dayLightSavings\": \"Y\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcTmplName\": \"*BR-DEF-13352\",\n    \"tgtTmplName\": \"*BR-DEF-13352\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T10:15Z\",\n    \"tmplRecCompPart\": \"TAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608202775361000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/tpl/copy?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tpl",
								"copy"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TAD Disconnect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"numTermLine\": 11,\n    \"tmZn\": \"C\",\n    \"dayLightSavings\": \"Y\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcTmplName\": \"*BR-DEF-13352\",\n    \"tgtTmplName\": \"*BR-DEF-13352\",\n    \"tgtEffDtTm\": \"2020-12-23\",\n    \"srcEffDtTm\": \"2020-12-18T10:15Z\",\n    \"tmplRecCompPart\": \"TAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608202775361000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/tpl/disconnect",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tpl",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "TAD Disconnect Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": \"N\",\n    \"conName\": \"Merin\",\n    \"conTel\": \"7727709876\",\n    \"numTermLine\": 11,\n    \"tmZn\": \"C\",\n    \"dayLightSavings\": \"Y\",\n    \"cmd\": \"U\",\n    \"cprSectName\": [],\n    \"lbl\": [],\n    \"srcTmplName\": \"*BR-DEF-13352\",\n    \"tgtTmplName\": \"*BR-DEF-13352\",\n    \"tgtEffDtTm\": \"2020-12-19\",\n    \"srcEffDtTm\": \"2020-12-18T10:15Z\",\n    \"tmplRecCompPart\": \"TAD\",\n    \"overWriteTGT\": \"Y\",\n    \"srcRecVersionId\": \"1608202775361000000\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/tpl/disconnect?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"tpl",
								"disconnect"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD Query _",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/query/{{num}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"query",
								"{{num}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD Query ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/rec/query?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"rec",
								"query"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD  Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"priority\": \"N\",\r\n    \"hldIndFlag\": \"N\",\r\n    \"svcOrderNum\": \"Test123\",\r\n    \"telco\": \"BRSA\",\r\n    \"conName\": \"Merin\",\r\n    \"conTel\": \"7727709876\",\r\n    \"destNums\": [\r\n        {\r\n            \"destNum\": \"{{num}}\",\r\n            \"numTermLine\": 11\r\n        }\r\n    ],\r\n    \"cmd\": \"U\",\r\n    \"srcNum\": \"{{num}}\",\r\n    \"tgtNum\": \"{{num}}\",\r\n    \"tgtEffDtTm\": \"2020-12-20\",\r\n    \"srcEffDtTm\": \"2020-12-19T09:15Z\",\r\n    \"custRecCompPart\": \"PAD\",\r\n    \"recVersionId\": \"1608203910691000000\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/copy",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD Copy ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/copy?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"copy"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD  Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"num\": \"{{num}}\",\r\n    \"priority\": \"N\",\r\n    \"hldIndFlag\": \"N\",\r\n    \"svcOrderNum\": \"Test123\",\r\n    \"telco\": \"BRSA\",\r\n    \"conName\": \"Merin\",\r\n    \"conTel\": \"7727709876\",\r\n    \"destNums\": [\r\n        {\r\n            \"destNum\": \"{{num}}\",\r\n            \"numTermLine\": 11\r\n        }\r\n    ],\r\n    \"cmd\": \"U\",\r\n    \"tgtEffDtTm\": \"2020-12-22\",\r\n    \"srcEffDtTm\": \"2020-12-21T09:15Z\",\r\n    \"custRecCompPart\": \"PAD\",\r\n    \"recVersionId\": \"1608204138753000000\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/transfer",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD Transfer ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/transfer?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"transfer"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD  Disconnect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"num\": \"8339173525\",\r\n    \"priority\": \"N\",\r\n    \"hldIndFlag\": \"N\",\r\n    \"svcOrderNum\": \"Test123\",\r\n    \"telco\": \"BRSA\",\r\n    \"conName\": \"Merin\",\r\n    \"conTel\": \"7727709876\",\r\n    \"destNums\": [\r\n        {\r\n            \"destNum\": \"8339173525\",\r\n            \"numTermLine\": 11\r\n        }\r\n    ],\r\n    \"referral\": \"N\",\r\n    \"endInterceptDt\": \"2020-12-24\",\r\n    \"cmd\": \"U\",\r\n    \"tgtEffDtTm\": \"2020-12-29\",\r\n    \"srcEffDtTm\": \"2020-12-21T09:15Z\",\r\n    \"custRecCompPart\": \"PAD\",\r\n    \"recVersionId\": \"1608204138753000000\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/disconnect",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"disconnect"
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD Disconnect ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/disconnect?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"disconnect"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD  Conversion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"console.log(request)\r",
									"let body = JSON.parse(responseBody)\r",
									"console.log(body)\r",
									"\r",
									"if(responseCode.code === 202){\r",
									"    postman.setGlobalVariable(\"reqId\", jsonData.reqId);\r",
									"    postman.setGlobalVariable(\"pollingUrl\", request.url);\r",
									"}else if(responseCode.code === 400){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    if(jsonData.errList){\r",
									"    postman.setGlobalVariable(\"Error\", jsonData.errList[0]);\r",
									"    }else{\r",
									"    console.log(\"errList\");\r",
									"    }\r",
									"   tests[\"Error Matches\"] = responseBody.has(data.ErrMsg)\r",
									"    tests[\"Error Code matches\"] = responseBody.has(data.ErrCode) \r",
									"}else if(responseCode.code === 200)\r",
									"{   if(jsonData.numList){\r",
									"     postman.setGlobalVariable(\"tgtNum\", jsonData.numList[0]);\r",
									"     \r",
									"    }\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"  key: 'Accept-Version',\r",
									"  value: '{{acc_version}}'\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"srcEffDtTm\": \"2020-12-19T09:15Z\",\r\n    \"recVersionId\": \"1608204779550000000\",\r\n    \"tgtEffDtTm\": \"2020-12-28\",\r\n    \"tfNum\": \"{{num}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/cnv",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"cnv"
							]
						}
					},
					"response": []
				},
				{
					"name": "PAD Convert ReqId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/v3/ip/cus/ptr/cnv?reqId={{reqId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"cus",
								"ptr",
								"cnv"
							],
							"query": [
								{
									"key": "reqId",
									"value": "{{reqId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url}}/v3/ip/sec/session/close",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// postman.clearGlobalVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{oauthToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"clientKey\": \"{{client_key}}\",\n    \"clientSecret\": \"{{client_secret}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/v3/ip/sec/session/close",
							"host": [
								"{{url}}"
							],
							"path": [
								"v3",
								"ip",
								"sec",
								"session",
								"close"
							],
							"query": [
								{
									"key": "sessOverrideKey",
									"value": "c3e745f1-9596-4afe-b04b-44620afc56e3",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}